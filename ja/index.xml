<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>evir35's blog</title><link>https://evir35.github.io/ja/</link><description>Recent content on evir35's blog</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>Copyright © 2022 - {year} evir35. All Rights Reserved.</copyright><lastBuildDate>Sun, 04 Sep 2022 23:41:50 +0900</lastBuildDate><atom:link href="https://evir35.github.io/ja/index.xml" rel="self" type="application/rss+xml"/><item><title>Tryout Deno</title><link>https://evir35.github.io/ja/posts/tryout-deno/</link><pubDate>Sun, 04 Sep 2022 23:41:50 +0900</pubDate><guid>https://evir35.github.io/ja/posts/tryout-deno/</guid><description>Deno runtimeの場合V8, Rust, Tokioで作られたJavascript, Typescript, WebAssembly Runtimeです。 今回は簡単な例を確認してnodejsとどう違うのか確認する時間を作ってみます。
環境 今回のpostで使ったlocal環境は下記のような環境です。
Machine: Macbook Pro (16-inchim, 2021), Apple M1 Pro OS: MacOS Monterey 12.6.3 Denoインストール Deno installationを参考したら、下記のcommandで簡単にインストールができます。
curl -fsSL https://deno.land/x/install/install.sh | sh deno binaryが自動でインストールされ、下記のコマンドでdeno binaryをPATHに登録します。
cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;$HOME/.zshrc # Deno export DENO_INSTALL=&amp;#34;/Users/user/.deno&amp;#34; export PATH=&amp;#34;\$DENO_INSTALL/bin:\$PATH&amp;#34; EOF source $HOME/.zshrc Deno binaryインストール確認 $ deno --version deno 1.36.3 (release, aarch64-apple-darwin) v8 11.6.189.12 typescript 5.1.6 Deno vscode pluginインストール vscodeをIDEで使う開発者のためdeno pluginを提供しています。installボタンを押してインストールします。
そしてvscodeのdeno関連のworkspaceでdeno pluginをenableするため下記のファイルを生成します。 (既存のファイルがあったらjsonに該当key/valueを追加します。)
# path: .vscode/settings.json { &amp;#34;deno.</description></item><item><title>Kindでkubernetes clusterをlocalで動かす方法</title><link>https://evir35.github.io/ja/posts/kind-setup-k8s-on-local/</link><pubDate>Tue, 16 Aug 2022 22:34:50 +0900</pubDate><guid>https://evir35.github.io/ja/posts/kind-setup-k8s-on-local/</guid><description>KindでKubernetes clusterをlocalで動かす方法 kindはDockerコンテナ「nodes」を使ってローカルでKubernetesクラスタを動かすためのツールです。 kindは主にKubernetes自体のテスト用に設計されましたが、ローカルでの開発やCIに使うこともできます。
kindは上の説明のようにlocalでkubernetesをtest用に使いたい時、dockerを利用してkubernetes clusterを簡単に構築できるように助けてくれるopensource toolです。名前の由来も面白いですが、Kubernetes IN DockerからK, IN, Dを取って kindになりました。kind github repositoryのdescriptionを確認すると分かります。
今日はkind clusterをlocalで生成して、nginxをnodeportで公開し、削除することでkindをテストしてみます。
環境設定 今回のpostで使ってるlocal環境は下記のような環境です。
Machine: Macbook Pro (16-inchim, 2021), Apple M1 Pro OS: MacOS Monterey 12.6.3 Install kind Macの場合Homebrewで簡単にインストールが可能ですが、特定のバージョンをインストールするためbinaryでインストールします。
curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.19.0/kind-darwin-arm64 chmod +x ./kind sudo mv ./kind /usr/local/bin/kind Check kind CLI brewを使ってkindが正しくインストールされたかversionとCLI helpを確認してみましょう。下記のように表示されたらkind CLIがちゃんとインストールされたとみてください。
$ kind --version kind version 0.19.0 $ kind --help kind creates and manages local Kubernetes clusters using Docker container &amp;#39;nodes&amp;#39; Usage: kind [command] Available Commands: build Build one of [node-image] completion Output shell completion code for the specified shell (bash, zsh or fish) create Creates one of [cluster] delete Deletes one of [cluster] export Exports one of [kubeconfig, logs] get Gets one of [clusters, nodes, kubeconfig] help Help about any command load Loads images into nodes version Prints the kind CLI version Flags: -h, --help help for kind --loglevel string DEPRECATED: see -v instead -q, --quiet silence all stderr output -v, --verbosity int32 info log verbosity, higher value produces more output --version version for kind Use &amp;#34;kind [command] --help&amp;#34; for more information about a command.</description></item><item><title>Podman 4.0.0 release</title><link>https://evir35.github.io/ja/posts/podman-release-4/</link><pubDate>Mon, 21 Mar 2022 11:44:53 +0900</pubDate><guid>https://evir35.github.io/ja/posts/podman-release-4/</guid><description>Podman 4.0.0 Release Podman 4.0.0 が 2022/02/18 にリリースされました。
Podman 4.0 is one of our most significant releases ever, featuring over 60 new features.
公式サイトではなんと60以上の新しいfeatureが追加されたと紹介しています。 この中で私が紹介したい新しいfeatureについて簡単なテストと紹介をしてみたいと思います。 全ての新しいfeatureを確認したい方はPodman v4.0.0 release notesを確認してください。
環境設定 今回のpostで使ったlocal環境は下記の環境です。
Machine: Macbook Pro (16-inchim, 2021), Apple M1 Pro OS: MacOS Monterey 12.1 Podman upgrade 以前の postでも見ましたが、MacではHomebrewを使って簡単にupgradeすることができます。
brew upgrade podman 以前インストールしたpodmanのバージョンは3.4.4でしたが、Hombrewを使ってupgradeをしたらupgradeされたバージョンが出ます。
$ podman --version podman version 4.0.2 私がインストールする時、最新バージョンが4.0.2なのでversionが4.0.2と出ます。 じゃ、podmanがupgradeされたので、新しい機能について説明します。
Podman machine Podmanで提供してるvirtual machine機能が便利でしたが、不便な点も多く存在しました。 今回のv4.0.0でアップデートされて不便だった部分がかなり解消されました。
公式的なWSLサポート WindowsではWSLというWindowsでlinuxシステムを使えるように提供しています。 PodmanではWSLをvirtual machine typeとして提供していませんでしたが、今回のリリースからWSLを公式にサポートするようになりました。
Windows OSを使ってる方には良いニュースです。</description></item><item><title>Podmanを始める</title><link>https://evir35.github.io/ja/posts/docker-alternatives-podman/</link><pubDate>Sun, 20 Feb 2022 17:05:53 +0900</pubDate><guid>https://evir35.github.io/ja/posts/docker-alternatives-podman/</guid><description>Docker desktopの有料化 ほとんどのユーザーがContainerに接するのはDockerを通して接しているはずです。 Linux distribution(e.g. Ubuntu, CentOS, &amp;hellip;)を使うUserは問題ないですが、WindowsやMacOSではDockerをそのまま使うことができず、仮想化を通してしか使うことができません。 このようなユーザーの不便さを減らすために登場したのがDocker desktopです。 Docker desktopはLinuxKitを利用してDockerを使えるVirtual MachineをWindowsやMacOSで自動で構築してDockerを使える環境を作ってくれます。 このようなDocker desktopがBusiness目的で使われる場合、有料化されました。 2022.01.31以降、Business目的で使用する場合、Dockerにサブスクリプション形式で使用料を支払う必要があります。 このような変更は、既存のDocker desktopを無料で使っていたユーザーには負担になることでしょう。 Docker desktopの代替を探してた時、podmanを発見しました。
Podmanとは？ PodmanはDocker CLIで使うほとんどのcommandが互換性があるconatiner/podを管理することができるツールです。 さらにPodmanのドキュメントでは alias docker=podmanでaliasを付けて使っても大丈夫だと言ってるほどDocker CLIとほとんど互換性があります。 それでは実際podmanをインストールして使ってみます。
環境設定 今回のpostで使ったlocal環境は下記のような環境です。
Machine: Macbook Pro (16-inchim, 2021), Apple M1 Pro OS: MacOS Monterey 12.1 Install Podman Macではhomebrewを使って簡単にインストールできます。
brew install podman 上のコマンドでインストールした後、versioncommandを使ってインストールされたPodmanのバージョンを確認することができます。
$ podman version Client: Version: 3.4.4 API Version: 3.4.4 Go Version: go1.17.6 Built: Thu Dec 9 03:41:11 2021 OS/Arch: darwin/arm64 Server: Version: 3.</description></item></channel></rss>